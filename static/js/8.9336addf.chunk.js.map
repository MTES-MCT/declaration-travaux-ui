{"version":3,"sources":["utils/users-mock.js","utils/api-mock.js"],"names":["users","id","email","firstName","lastName","profils","principal","waitingTime","depotsFixtures","type","date","etat","userId","typeFromCerfa","fileName","length","toUpperCase","includes","cerfaError","file","name","api","auth","login","Promise","resolve","reject","setTimeout","find","user","Error","isAuthenticated","logout","getUser","isDepositaire","isInstructeur","isBeta","depots","mesDepots","page","totalCount","monDepot","depot","ajouterDepot","binary","toString","Date","toLocaleDateString","push","savePieceJointe","code","checkCode","sessionStorage","setItem","JSON","stringify","nom","size","data","loadPieceJointe","parse","getItem"],"mappings":"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","file":"static/js/8.9336addf.chunk.js","sourcesContent":["const users = [\n  {\n    id: 'jean.martin',\n    email: 'jean.martin@monfai.fr',\n    firstName: 'Jean',\n    lastName: 'Martin',\n    profils: ['depositaire', 'beta']\n  },\n  {\n    id: 'jacques.dupont',\n    email: 'jacques.dupont@monfai.fr',\n    firstName: 'Jacques',\n    lastName: 'Dupont',\n    profils: ['instructeur']\n  }\n];\n\nexport default users;\n","import users from './users-mock';\n// API de test uniquement\n\nlet principal = null;\n\nconst waitingTime = 100;\n\nfunction login(id) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (!id)\n        return reject(new Error('Connexion impossible. User id inconnu.'));\n      return resolve((principal = users.find(user => user.id === id)));\n    }, waitingTime);\n  });\n}\n\nfunction logout() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve((principal = null));\n    }, waitingTime);\n  });\n}\n\nfunction isAuthenticated() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      return resolve(principal !== null);\n    }, waitingTime);\n  });\n}\n\nfunction isDepositaire() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      return resolve(principal.profils.includes('depositaire'));\n    }, waitingTime);\n  });\n}\n\nfunction isInstructeur() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      return resolve(principal.profils.includes('instructeur'));\n    }, waitingTime);\n  });\n}\n\nfunction isBeta() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      return resolve(principal.profils.includes('beta'));\n    }, waitingTime);\n  });\n}\n\nfunction getUser() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (!principal) return reject(new Error(\"Pas d'utilisateur connecté\"));\n      return resolve(principal);\n    }, waitingTime);\n  });\n}\n\nlet depotsFixtures = [\n  {\n    id: '0',\n    type: 'dp',\n    date: '01/01/2019',\n    etat: 'instruction',\n    userId: 'jean.martin'\n  },\n  {\n    id: '1',\n    type: 'pcmi',\n    date: '01/07/2019',\n    etat: 'incomplet',\n    userId: 'jean.martin'\n  }\n];\n\nfunction mesDepots() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      return resolve({\n        depots: depotsFixtures,\n        page: 0,\n        totalCount: 1\n      });\n    }, waitingTime);\n  });\n}\n\nfunction monDepot(id) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      return resolve(depotsFixtures.find(depot => depot.id === id));\n    }, waitingTime);\n  });\n}\n\nfunction typeFromCerfa(fileName) {\n  let type = '';\n  if (fileName && fileName.length > 0) {\n    if (fileName.toUpperCase().includes('13406_PCMI')) type = 'pcmi';\n    if (fileName.toUpperCase().includes('13703_DPMI')) type = 'dp';\n  }\n  return type;\n}\n\nfunction cerfaError(file) {\n  return `Fichier CERFA ${file.name} non reconnu. Seuls les fichiers nommés cerfa_13406_PCMI.pdf ou cerfa_13703_DPMI.pdf sont reconnus.`;\n}\n\nfunction ajouterDepot(file, binary) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const type = typeFromCerfa(file.name);\n      if (type === '') return reject(new Error(cerfaError(file)));\n      const depot = {\n        id: depotsFixtures.length.toString(),\n        type: type,\n        date: new Date().toLocaleDateString(),\n        etat: 'instruction',\n        userId: principal.id\n      };\n      depotsFixtures.push(depot);\n      return resolve(depot);\n    }, waitingTime);\n  });\n}\n\nfunction checkCode(code, file) {\n  if (!file.name) return true; // hack because cypress dropzone command have undefined file.name\n  const type = typeFromCerfa(file.name);\n  return code.includes('cerfa') ? code === type + 'cerfa' : true;\n}\n\nfunction savePieceJointe(code, file, binary) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (!checkCode(code, file)) return reject(new Error(cerfaError(file)));\n      return resolve(\n        sessionStorage.setItem(\n          code,\n          JSON.stringify({\n            nom: file.name,\n            type: file.type,\n            size: file.size,\n            data: binary\n          })\n        )\n      );\n    }, waitingTime);\n  });\n}\n\nfunction loadPieceJointe(code) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      return resolve(JSON.parse(sessionStorage.getItem(code)));\n    }, waitingTime);\n  });\n}\n\nconst auth = {\n  login,\n  isAuthenticated,\n  logout,\n  getUser,\n  isDepositaire,\n  isInstructeur,\n  isBeta\n};\nconst depots = {\n  mesDepots,\n  monDepot,\n  ajouterDepot,\n  savePieceJointe,\n  loadPieceJointe\n};\n\nconst api = {\n  auth,\n  depots\n};\n\nexport default api;\n"],"sourceRoot":""}