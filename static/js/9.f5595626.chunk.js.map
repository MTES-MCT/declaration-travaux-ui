{"version":3,"sources":["utils/api-real.js"],"names":["__webpack_require__","r","__webpack_exports__","axios__WEBPACK_IMPORTED_MODULE_0__","axios__WEBPACK_IMPORTED_MODULE_0___default","n","keycloak_js__WEBPACK_IMPORTED_MODULE_1__","keycloak_js__WEBPACK_IMPORTED_MODULE_1___default","utils_env_helper__WEBPACK_IMPORTED_MODULE_2__","apiHttpClient","axios","create","baseURL","env","timeout","headers","Origin","keycloak","Keycloak","url","realm","clientId","interceptors","request","use","config","token","Authorization","concat","error","Promise","reject","api","auth","login","resolve","init","onLoad","success","authenticated","Error","isAuthenticated","logout","getUser","loadUserInfo","userInfo","firstName","given_name","lastName","family_name","email","isDepositaire","hasRealmRole","isInstructeur","depots","mesDepots","get","savePieceJointe","code","file","binary","post"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,KAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,KAAAO,EAAAP,EAAAK,EAAAC,GAAAE,EAAAR,EAAA,KAMMS,EAAgBC,IAAMC,OAAO,CACjCC,QAASC,YAAI,qBACbC,QAAS,IACTC,QAAS,CAAEC,OAAQH,YAAI,uBAGnBI,EAAWC,IAAS,CACxBC,IAAKN,YAAI,yBACTO,MAAOP,YAAI,2BACXQ,SAAUR,YAAI,iCAGhBH,IAAMY,aAAaC,QAAQC,IACzB,SAASC,GACP,IAAMC,EAAQT,EAASS,MAEvB,OADIA,IAAOD,EAAOV,QAAQY,cAAf,UAAAC,OAAyCF,IAC7CD,GAET,SAASI,GACP,OAAOC,QAAQC,OAAOF,KAgF1B,IAaMG,EAAM,CACVC,KAdW,CACXC,MA7EF,WACE,OAAO,IAAIJ,QAAQ,SAACK,EAASJ,GAC3B,OAAOd,EACJmB,KAAK,CAAEC,OAAQ,mBACfC,QAAQ,SAAAC,GACP,OAAOJ,EAAQI,KAEhBV,MAAM,SAAAA,GACL,OAAOE,EAAO,IAAIS,MAAMX,SAsE9BY,gBApDF,WACE,OAAO,IAAIX,QAAQ,SAACK,EAASJ,GAC3B,OAAOd,EACJmB,KAAK,CAAEC,OAAQ,cACfC,QAAQ,SAAAC,GACP,OAAOJ,EAAQI,KAEhBV,MAAM,SAAAA,GACL,OAAOE,EAAO,IAAIS,MAAMX,SA6C9Ba,OAlEF,WACE,OAAO,IAAIZ,QAAQ,SAACK,EAASJ,GAC3B,OAAOd,EACJyB,SACAJ,QAAQ,SAAAC,GACP,OAAOJ,EAAQI,KAEhBV,MAAM,SAAAA,GACL,OAAOE,EAAO,IAAIS,MAAMX,SA2D9Bc,QA7BF,WACE,OAAO,IAAIb,QAAQ,SAACK,EAASJ,GAC3B,OAAOd,EACJ2B,eACAN,QAAQ,SAAAO,GACP,OAAOV,EAAQ,CACbW,UAAWD,EAASE,WACpBC,SAAUH,EAASI,YACnBC,MAAOL,EAASK,UAGnBrB,MAAM,SAAAA,GACL,OAAOE,EAAO,IAAIS,MAAMX,SAkB9BsB,cA1CF,WACE,OAAO,IAAIrB,QAAQ,SAACK,EAASJ,GAC3B,OAAOI,EAAQlB,EAASmC,aAAa,mBAyCvCC,cArCF,WACE,OAAO,IAAIvB,QAAQ,SAACK,EAASJ,GAC3B,OAAOI,EAAQlB,EAASmC,aAAa,oBA4CvCE,OAPa,CACbC,UAjBF,WACE,OAAO9C,EAAc+C,IAAd,YAiBPC,gBAdF,SAAyBC,EAAMC,EAAMC,GACnC,OAAOnD,EAAcoD,KAAd,iBAAqC,CAAEH,OAAMC,OAAMC,cAqB7C5B","file":"static/js/9.f5595626.chunk.js","sourcesContent":["import axios from 'axios';\nimport Keycloak from 'keycloak-js';\nimport { env } from 'utils/env-helper';\n\n// API rÃ©elle\n\nconst apiHttpClient = axios.create({\n  baseURL: env('REACT_APP_API_URL'),\n  timeout: 1000,\n  headers: { Origin: env('REACT_APP_DOMAIN') }\n});\n\nconst keycloak = Keycloak({\n  url: env('REACT_APP_SSO_APP_URL'),\n  realm: env('REACT_APP_SSO_APP_REALM'),\n  clientId: env('REACT_APP_SSO_APP_CLIENT_ID')\n});\n\naxios.interceptors.request.use(\n  function(config) {\n    const token = keycloak.token;\n    if (token) config.headers.Authorization = `Bearer ${token}`;\n    return config;\n  },\n  function(error) {\n    return Promise.reject(error);\n  }\n);\n\nfunction login() {\n  return new Promise((resolve, reject) => {\n    return keycloak\n      .init({ onLoad: 'login-required' })\n      .success(authenticated => {\n        return resolve(authenticated);\n      })\n      .error(error => {\n        return reject(new Error(error));\n      });\n  });\n}\n\nfunction logout() {\n  return new Promise((resolve, reject) => {\n    return keycloak\n      .logout()\n      .success(authenticated => {\n        return resolve(authenticated);\n      })\n      .error(error => {\n        return reject(new Error(error));\n      });\n  });\n}\n\nfunction isAuthenticated() {\n  return new Promise((resolve, reject) => {\n    return keycloak\n      .init({ onLoad: 'check-sso' })\n      .success(authenticated => {\n        return resolve(authenticated);\n      })\n      .error(error => {\n        return reject(new Error(error));\n      });\n  });\n}\n\nfunction isDepositaire() {\n  return new Promise((resolve, reject) => {\n    return resolve(keycloak.hasRealmRole('depositaire'));\n  });\n}\n\nfunction isInstructeur() {\n  return new Promise((resolve, reject) => {\n    return resolve(keycloak.hasRealmRole('instructeur'));\n  });\n}\n\nfunction getUser() {\n  return new Promise((resolve, reject) => {\n    return keycloak\n      .loadUserInfo()\n      .success(userInfo => {\n        return resolve({\n          firstName: userInfo.given_name,\n          lastName: userInfo.family_name,\n          email: userInfo.email\n        });\n      })\n      .error(error => {\n        return reject(new Error(error));\n      });\n  });\n}\n\nfunction mesDepots() {\n  return apiHttpClient.get(`/depots`);\n}\n\nfunction savePieceJointe(code, file, binary) {\n  return apiHttpClient.post(`/piecesjointes`, { code, file, binary });\n}\n\nconst auth = {\n  login,\n  isAuthenticated,\n  logout,\n  getUser,\n  isDepositaire,\n  isInstructeur\n};\nconst depots = {\n  mesDepots,\n  savePieceJointe\n};\n\nconst api = {\n  auth,\n  depots\n};\n\nexport default api;\n"],"sourceRoot":""}