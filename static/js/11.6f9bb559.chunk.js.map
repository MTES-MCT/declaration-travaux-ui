{"version":3,"sources":["utils/api-real.js"],"names":["__webpack_require__","r","__webpack_exports__","axios__WEBPACK_IMPORTED_MODULE_0__","axios__WEBPACK_IMPORTED_MODULE_0___default","n","keycloak_js__WEBPACK_IMPORTED_MODULE_1__","keycloak_js__WEBPACK_IMPORTED_MODULE_1___default","apiHttpClient","axios","create","baseURL","process","REACT_APP_API_URL","timeout","keycloak","Keycloak","url","REACT_APP_SSO_APP_URL","realm","REACT_APP_SSO_APP_REALM","clientId","REACT_APP_SSO_APP_CLIENT_ID","interceptors","request","use","config","token","headers","Authorization","concat","error","Promise","reject","api","auth","login","resolve","init","onLoad","success","authenticated","message","JSON","stringify","isAuthenticated","logout","getUser","loadUserInfo","userInfo","firstName","given_name","lastName","family_name","email","dossiers","loadUserDossiers","userId","get","deposer","cerfa","post"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,KAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,KAAAO,EAAAP,EAAAK,EAAAC,GAKME,EAAgBC,IAAMC,OAAO,CACjCC,QAASC,2KAAYC,kBACrBC,QAAS,MAGLC,EAAWC,IAAS,CACxBC,IAAKL,2KAAYM,sBACjBC,MAAOP,2KAAYQ,wBACnBC,SAAUT,2KAAYU,8BAGxBb,IAAMc,aAAaC,QAAQC,IACzB,SAASC,GACP,IAAMC,EAAQZ,EAASY,MAEvB,OADIA,IAAOD,EAAOE,QAAQC,cAAf,UAAAC,OAAyCH,IAC7CD,GAET,SAASK,GACP,OAAOC,QAAQC,OAAOF,KAoE1B,IAWMG,EAAM,CACVC,KAZW,CACXC,MAjEF,WACE,OAAO,IAAIJ,QAAQ,SAACK,EAASJ,GAC3B,OAAOlB,EACJuB,KAAK,CAAEC,OAAQ,mBACfC,QAAQ,SAAAC,GACP,OAAOJ,EAAQI,KAEhBV,MAAM,SAAAA,GACL,OAAOE,EAAO,CAAES,QAASC,KAAKC,UAAUb,UA0D9Cc,gBAxCF,WACE,OAAO,IAAIb,QAAQ,SAACK,EAASJ,GAC3B,OAAOlB,EACJuB,KAAK,CAAEC,OAAQ,cACfC,QAAQ,SAAAC,GACP,OAAOJ,EAAQI,KAEhBV,MAAM,SAAAA,GACL,OAAOE,EAAO,CAAES,QAASC,KAAKC,UAAUb,UAiC9Ce,OAtDF,WACE,OAAO,IAAId,QAAQ,SAACK,EAASJ,GAC3B,OAAOlB,EACJ+B,SACAN,QAAQ,SAAAC,GACP,OAAOJ,EAAQI,KAEhBV,MAAM,SAAAA,GACL,OAAOE,EAAO,CAAES,QAASC,KAAKC,UAAUb,UA+C9CgB,QA7BF,WACE,OAAO,IAAIf,QAAQ,SAACK,EAASJ,GAC3B,OAAOlB,EACJiC,eACAR,QAAQ,SAAAS,GACP,OAAOZ,EAAQ,CACba,UAAWD,EAASE,WACpBC,SAAUH,EAASI,YACnBC,MAAOL,EAASK,UAGnBvB,MAAM,SAAAA,GACL,OAAOE,EAAO,CAAES,QAASC,KAAKC,UAAUb,WA0B9CwB,SAPe,CACfC,iBAfF,SAA0BC,GACxB,OAAOjD,EAAckD,IAAd,cAAA5B,OAAgC2B,EAAhC,eAePE,QAZF,SAAiBC,GACf,OAAOpD,EAAcqD,KAAd,eAmBM3B","file":"static/js/11.6f9bb559.chunk.js","sourcesContent":["import axios from 'axios';\nimport Keycloak from 'keycloak-js';\n\n// API rÃ©elle\n\nconst apiHttpClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  timeout: 1000\n});\n\nconst keycloak = Keycloak({\n  url: process.env.REACT_APP_SSO_APP_URL,\n  realm: process.env.REACT_APP_SSO_APP_REALM,\n  clientId: process.env.REACT_APP_SSO_APP_CLIENT_ID\n});\n\naxios.interceptors.request.use(\n  function(config) {\n    const token = keycloak.token;\n    if (token) config.headers.Authorization = `Bearer ${token}`;\n    return config;\n  },\n  function(error) {\n    return Promise.reject(error);\n  }\n);\n\nfunction login() {\n  return new Promise((resolve, reject) => {\n    return keycloak\n      .init({ onLoad: 'login-required' })\n      .success(authenticated => {\n        return resolve(authenticated);\n      })\n      .error(error => {\n        return reject({ message: JSON.stringify(error) });\n      });\n  });\n}\n\nfunction logout() {\n  return new Promise((resolve, reject) => {\n    return keycloak\n      .logout()\n      .success(authenticated => {\n        return resolve(authenticated);\n      })\n      .error(error => {\n        return reject({ message: JSON.stringify(error) });\n      });\n  });\n}\n\nfunction isAuthenticated() {\n  return new Promise((resolve, reject) => {\n    return keycloak\n      .init({ onLoad: 'check-sso' })\n      .success(authenticated => {\n        return resolve(authenticated);\n      })\n      .error(error => {\n        return reject({ message: JSON.stringify(error) });\n      });\n  });\n}\n\nfunction getUser() {\n  return new Promise((resolve, reject) => {\n    return keycloak\n      .loadUserInfo()\n      .success(userInfo => {\n        return resolve({\n          firstName: userInfo.given_name,\n          lastName: userInfo.family_name,\n          email: userInfo.email\n        });\n      })\n      .error(error => {\n        return reject({ message: JSON.stringify(error) });\n      });\n  });\n}\n\nfunction loadUserDossiers(userId) {\n  return apiHttpClient.get(`/deposants/${userId}/dossiers`);\n}\n\nfunction deposer(cerfa) {\n  return apiHttpClient.post(`/deposer`);\n}\n\nconst auth = {\n  login,\n  isAuthenticated,\n  logout,\n  getUser\n};\nconst dossiers = {\n  loadUserDossiers,\n  deposer\n};\n\nconst api = {\n  auth,\n  dossiers\n};\n\nexport default api;\n"],"sourceRoot":""}