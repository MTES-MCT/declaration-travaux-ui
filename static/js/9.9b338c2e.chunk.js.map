{"version":3,"sources":["utils/users-mock.js","utils/api-mock.js"],"names":["users","id","email","password","firstName","lastName","principal","waitingTime","api","auth","login","Promise","resolve","reject","setTimeout","length","JSON","stringify","message","isAuthenticated","logout","getUser","dossiers","loadUserDossiers","userId","deposer","cerfa"],"mappings":"gGAAA,IAUeA,EAVD,CACZ,CACEC,GAAI,OACJC,MAAO,eACPC,SAAU,WACVC,UAAW,OACXC,SAAU,SCFVC,EAAY,KAEVC,EAAc,IAwDpB,IAWMC,EAAM,CACVC,KAZW,CACXC,MAvDF,WACE,OAAO,IAAIC,QAAQ,SAACC,EAASC,GAC3BC,WAAW,WACT,OAAId,EAAMe,OAAS,EACVF,EAAOG,KAAKC,UAAU,CAAEC,QAAS,0BACnCN,EAASN,EAAYN,EAAM,KACjCO,MAkDLY,gBAtCF,WACE,OAAO,IAAIR,QAAQ,SAACC,EAASC,GAC3BC,WAAW,WACT,OAAOF,EAAsB,OAAdN,IACdC,MAmCLa,OA/CF,WACE,OAAO,IAAIT,QAAQ,SAACC,EAASC,GAC3BC,WAAW,WACTF,EAASN,EAAY,OACpBC,MA4CLc,QAhCF,WACE,OAAO,IAAIV,QAAQ,SAACC,EAASC,GAC3BC,WAAW,WACT,OAAKR,EAIEM,EAAQN,GAHNO,EACLG,KAAKC,UAAU,CAAEC,QAAS,oCAG7BX,OAiCLe,SAPe,CACfC,iBAvBF,SAA0BC,GACxB,OAAO,IAAIb,QAAQ,SAACC,EAASC,GAC3BC,WAAW,WACT,OAAOF,EAAQ,KACdL,MAoBLkB,QAhBF,SAAiBC,GACf,OAAO,IAAIf,QAAQ,SAACC,EAASC,GAC3BC,WAAW,WACT,OAAOF,EAAQc,IACdnB,QAoBQC","file":"static/js/9.9b338c2e.chunk.js","sourcesContent":["const users = [\n  {\n    id: 'test',\n    email: 'test@test.fr',\n    password: 'test1234',\n    firstName: 'Test',\n    lastName: 'Test'\n  }\n];\n\nexport default users;\n","import users from './users-mock';\n\n// API de test uniquement\n\nlet principal = null;\n\nconst waitingTime = 100;\n\nfunction login() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (users.length < 1)\n        return reject(JSON.stringify({ message: 'Connexion impossible' }));\n      return resolve((principal = users[0]));\n    }, waitingTime);\n  });\n}\n\nfunction logout() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve((principal = null));\n    }, waitingTime);\n  });\n}\n\nfunction isAuthenticated() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      return resolve(principal !== null);\n    }, waitingTime);\n  });\n}\n\nfunction getUser() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (!principal)\n        return reject(\n          JSON.stringify({ message: \"Pas d'utilisateur connectÃ©\" })\n        );\n      return resolve(principal);\n    }, waitingTime);\n  });\n}\n\nfunction loadUserDossiers(userId) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      return resolve([]);\n    }, waitingTime);\n  });\n}\n\nfunction deposer(cerfa) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      return resolve(cerfa);\n    }, waitingTime);\n  });\n}\n\nconst auth = {\n  login,\n  isAuthenticated,\n  logout,\n  getUser\n};\nconst dossiers = {\n  loadUserDossiers,\n  deposer\n};\n\nconst api = {\n  auth,\n  dossiers\n};\n\nexport default api;\n"],"sourceRoot":""}