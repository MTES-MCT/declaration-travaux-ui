{"version":3,"sources":["utils/users-mock.js","utils/api-mock.js"],"names":["users","id","email","firstName","lastName","profils","principal","waitingTime","depotsFixtures","typeFromCerfa","fileName","type","length","toUpperCase","includes","cerfaError","file","name","saveInSessionStorage","depot","numero","reader","FileReader","onload","binaryStr","result","sessionStorage","setItem","JSON","stringify","nom","size","data","URL","createObjectURL","Blob","readAsBinaryString","api","auth","login","Promise","resolve","reject","setTimeout","find","user","Error","isAuthenticated","logout","getUser","isDeposant","isInstructeur","isBeta","depots","mesDepots","monDepot","ajouterDepot","formData","get","toString","date","Date","toLocaleDateString","statut","userId","cerfa","fichierId","depotId","piecesAJoindre","piecesJointes","console","log","push","savePieceJointe","dossierId","code","checkCode","lireFichier","parse","getItem"],"mappings":"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","file":"static/js/8.0cc3f1b9.chunk.js","sourcesContent":["const users = [\n  {\n    id: 'jean.martin',\n    email: 'jean.martin@monfai.fr',\n    firstName: 'Jean',\n    lastName: 'Martin',\n    profils: ['DEPOSANT', 'BETA']\n  },\n  {\n    id: 'jacques.dupont',\n    email: 'jacques.dupont@monfai.fr',\n    firstName: 'Jacques',\n    lastName: 'Dupont',\n    profils: ['INSTRUCTEUR']\n  }\n];\n\nexport default users;\n","import users from './users-mock';\n// API de test uniquement\n\nlet principal = null;\n\nconst waitingTime = 100;\n\nfunction login(id) {\n  return new Promise((resolve, reject) => {\n    setTimeout(function() {\n      if (!id)\n        return reject(new Error('Connexion impossible. User id inconnu.'));\n      return resolve((principal = users.find(user => user.id === id)));\n    }, waitingTime);\n  });\n}\n\nfunction logout() {\n  return new Promise((resolve, reject) => {\n    setTimeout(function() {\n      resolve((principal = null));\n    }, waitingTime);\n  });\n}\n\nfunction isAuthenticated() {\n  return new Promise((resolve, reject) => {\n    setTimeout(function() {\n      return resolve(principal !== null);\n    }, waitingTime);\n  });\n}\n\nfunction isDeposant() {\n  return new Promise((resolve, reject) => {\n    setTimeout(function() {\n      return resolve(principal.profils.includes('DEPOSANT'));\n    }, waitingTime);\n  });\n}\n\nfunction isInstructeur() {\n  return new Promise((resolve, reject) => {\n    setTimeout(function() {\n      return resolve(principal.profils.includes('INSTRUCTEUR'));\n    }, waitingTime);\n  });\n}\n\nfunction isBeta() {\n  return new Promise((resolve, reject) => {\n    setTimeout(function() {\n      return resolve(principal.profils.includes('BETA'));\n    }, waitingTime);\n  });\n}\n\nfunction getUser() {\n  return new Promise((resolve, reject) => {\n    setTimeout(function() {\n      if (!principal) return reject(new Error(\"Pas d'utilisateur connecté\"));\n      return resolve(principal);\n    }, waitingTime);\n  });\n}\n\nlet depotsFixtures = [\n  // {\n  //   id: \"0\",\n  //   type: \"dp\",\n  //   date: \"01/01/2019\",\n  //   statut: \"DEPOSE\",\n  //   userId: \"jean.martin\",\n  //   piecesAJoindre: [\"1\"],\n  //   cerfa: { type: \"dp\", numero: \"0\", fichierId: \"dp0\", depotId: \"0\" },\n  //   piecesJointes: []\n  // },\n  // {\n  //   id: \"1\",\n  //   type: \"pcmi\",\n  //   date: \"01/07/2019\",\n  //   statut: \"DEPOSE\",\n  //   userId: \"jean.martin\",\n  //   piecesAJoindre: [\"1\", \"2\"],\n  //   cerfa: { type: \"pcmi\", numero: \"0\", fichierId: \"pcmi0\", depotId: \"1\" },\n  //   piecesJointes: []\n  // }\n];\n\nfunction mesDepots() {\n  return new Promise((resolve, reject) => {\n    setTimeout(function() {\n      return resolve(depotsFixtures);\n    }, waitingTime);\n  });\n}\n\nfunction monDepot(id) {\n  return new Promise((resolve, reject) => {\n    setTimeout(function() {\n      return resolve(depotsFixtures.find(depot => depot.id === id));\n    }, waitingTime);\n  });\n}\n\nfunction typeFromCerfa(fileName) {\n  let type = '';\n  if (fileName && fileName.length > 0) {\n    if (fileName.toUpperCase().includes('13406_PCMI')) type = 'pcmi';\n    if (fileName.toUpperCase().includes('13703_DPMI')) type = 'dp';\n  }\n  return type;\n}\n\nfunction cerfaError(file) {\n  return `Fichier CERFA ${file.name} non reconnu. Seuls les fichiers nommés cerfa_13406_PCMI.pdf ou cerfa_13703_DPMI.pdf sont reconnus.`;\n}\n\nfunction saveInSessionStorage(depot, numero, file) {\n  const reader = new FileReader();\n  reader.onload = function() {\n    const binaryStr = reader.result;\n    sessionStorage.setItem(\n      depot.type + numero,\n      JSON.stringify({\n        nom: file.name,\n        type: file.type,\n        size: file.size,\n        data: URL.createObjectURL(new Blob([binaryStr], { type: file.type }))\n      })\n    );\n  };\n  reader.readAsBinaryString(file);\n}\n\nfunction ajouterDepot(formData) {\n  return new Promise((resolve, reject) => {\n    setTimeout(function() {\n      let file = formData.get('file');\n      const type = typeFromCerfa(file.name);\n      if (type === '') throw new Error(cerfaError(file));\n      const depot = {\n        id: depotsFixtures.length.toString(),\n        type: type,\n        date: new Date().toLocaleDateString(),\n        statut: 'DEPOSE',\n        userId: principal.id,\n        cerfa: {\n          type: type,\n          numero: '0',\n          fichierId: type + '0',\n          depotId: depotsFixtures.length.toString()\n        },\n        piecesAJoindre: ['1'],\n        piecesJointes: []\n      };\n      console.log('depot=', JSON.stringify(depot));\n      saveInSessionStorage(depot, '0', file);\n      depotsFixtures.push(depot);\n      return resolve();\n    }, waitingTime);\n  });\n}\n\nfunction checkCode(code, file) {\n  if (!file.name) return true; // hack because cypress dropzone command have undefined file.name\n  const type = typeFromCerfa(file.name);\n  return code.includes('cerfa') ? code === type + '0' : true;\n}\n\nfunction savePieceJointe(dossierId, numero, formData) {\n  return new Promise((resolve, reject) => {\n    setTimeout(function() {\n      let file = formData.get('file');\n      if (!checkCode(numero, file)) throw new Error(cerfaError(file));\n      let depot = depotsFixtures.find(depot => depot.id === dossierId);\n      saveInSessionStorage(depot, numero, file);\n      depot.piecesJointes.push({\n        type: depot.type,\n        numero: numero,\n        fichierId: depot.type + numero,\n        depotId: dossierId\n      });\n      return resolve();\n    }, waitingTime);\n  });\n}\n\nfunction lireFichier(id) {\n  return new Promise((resolve, reject) => {\n    setTimeout(function() {\n      return resolve(JSON.parse(sessionStorage.getItem(id)));\n    }, waitingTime);\n  });\n}\n\nconst auth = {\n  login,\n  isAuthenticated,\n  logout,\n  getUser,\n  isDeposant: isDeposant,\n  isInstructeur,\n  isBeta\n};\nconst depots = {\n  mesDepots,\n  monDepot,\n  ajouterDepot,\n  savePieceJointe,\n  lireFichier\n};\n\nconst api = {\n  auth,\n  depots\n};\n\nexport default api;\n"],"sourceRoot":""}