{"version":3,"sources":["utils/axios-keycloak.js","utils/api-real.js"],"names":["AxiosKeycloak","config","instance","axios","create","interceptors","request","use","Promise","resolve","reject","updateToken","success","headers","Authorization","token","error","login","Keycloak","keycloak","url","env","realm","clientId","apiHttpClient","createAxiosInstance","baseURL","api","auth","init","onLoad","authenticated","Error","isAuthenticated","logout","getUser","loadUserInfo","userInfo","firstName","given_name","lastName","family_name","email","isDepositaire","hasRealmRole","isInstructeur","isBeta","depots","mesDepots","get","ajouterDepot","file","binary","post","savePieceJointe","code"],"mappings":"8LAGqBA,E,4LACCC,GAAS,IAAD,OACpBC,EAAWC,IAAMC,OAAOH,GAgB9B,OAdAC,EAASG,aAAaC,QAAQC,IAC5B,SAAAN,GAAM,OACJ,IAAIO,QAAQ,SAACC,EAASC,GAAV,OACV,EAAKC,YAAY,GACdC,QAAQ,WACPX,EAAOY,QAAQC,cAAgB,UAAY,EAAKC,MAChDN,EAAQR,KAETe,MAAM,WACL,EAAKC,cAKRf,K,6BAIP,OAAOC,Q,UAtBgCe,G,SCErCC,EAAW,IAAInB,EAAc,CACjCoB,IAAKC,YAAI,yBACTC,MAAOD,YAAI,2BACXE,SAAUF,YAAI,iCAGVG,EAAgBL,EAASM,oBAAoB,CACjDC,QAASL,YAAI,uBAsHf,IAeMM,EAAM,CACVC,KAhBW,CACXX,MApHF,WACE,OAAO,IAAIT,QAAQ,SAACC,EAASC,GAC3B,OAAOS,EACJU,KAAK,CAAEC,OAAQ,mBACflB,QAAQ,SAAAmB,GACP,OAAOtB,EAAQsB,KAEhBf,MAAM,SAAAA,GACL,OAAON,EAAO,IAAIsB,MAAMhB,SA6G9BiB,gBA3FF,WACE,OAAO,IAAIzB,QAAQ,SAACC,EAASC,GAC3B,OAAOS,EACJU,KAAK,CAAEC,OAAQ,cACflB,QAAQ,SAAAmB,GACP,OAAOtB,EAAQsB,KAEhBf,MAAM,SAAAA,GACL,OAAON,EAAO,IAAIsB,MAAMhB,SAoF9BkB,OAzGF,WACE,OAAO,IAAI1B,QAAQ,SAACC,EAASC,GAC3B,OAAOS,EACJe,SACAtB,QAAQ,SAAAmB,GACP,OAAOtB,EAAQsB,KAEhBf,MAAM,SAAAA,GACL,OAAON,EAAO,IAAIsB,MAAMhB,SAkG9BmB,QA9DF,WACE,OAAO,IAAI3B,QAAQ,SAACC,EAASC,GAC3B,OAAOS,EACJiB,eACAxB,QAAQ,SAAAyB,GACP,OAAO5B,EAAQ,CACb6B,UAAWD,EAASE,WACpBC,SAAUH,EAASI,YACnBC,MAAOL,EAASK,UAGnB1B,MAAM,SAAAA,GACL,OAAON,EAAO,IAAIsB,MAAMhB,SAmD9B2B,cAjFF,WACE,OAAO,IAAInC,QAAQ,SAACC,EAASC,GAC3B,OAAOD,EAAQU,EAASyB,aAAa,mBAgFvCC,cA5EF,WACE,OAAO,IAAIrC,QAAQ,SAACC,EAASC,GAC3B,OAAOD,EAAQU,EAASyB,aAAa,mBA2EvCE,OAvEF,WACE,OAAO,IAAItC,QAAQ,SAACC,EAASC,GAC3B,OAAOD,EAAQU,EAASyB,aAAa,aA+EvCG,OARa,CACbC,UAnDF,WACE,OAAO,IAAIxC,QAAQ,SAACC,EAASC,GAC3B,OAAOS,EACJU,KAAK,CAAEC,OAAQ,cACflB,QAAQ,SAAAmB,GACP,OAAOtB,EAAQe,EAAcyB,IAAd,cAEhBjC,MAAM,SAAAA,GACL,OAAON,EAAO,IAAIsB,MAAMhB,SA4C9BkC,aAvCF,SAAsBC,EAAMC,GAC1B,OAAO,IAAI5C,QAAQ,SAACC,EAASC,GAC3B,OAAOS,EACJU,KAAK,CAAEC,OAAQ,cACflB,QAAQ,SAAAmB,GACP,OAAOtB,EAAQe,EAAc6B,KAAd,UAA8B,CAAEF,OAAMC,cAEtDpC,MAAM,SAAAA,GACL,OAAON,EAAO,IAAIsB,MAAMhB,SAgC9BsC,gBA3BF,SAAyBC,EAAMJ,EAAMC,GACnC,OAAO,IAAI5C,QAAQ,SAACC,EAASC,GAC3B,OAAOS,EACJU,KAAK,CAAEC,OAAQ,cACflB,QAAQ,SAAAmB,GACP,OAAOtB,EACLe,EAAc6B,KAAd,iBAAqC,CAAEE,OAAMJ,OAAMC,cAGtDpC,MAAM,SAAAA,GACL,OAAON,EAAO,IAAIsB,MAAMhB,WAyBjBW","file":"static/js/9.4aacc802.chunk.js","sourcesContent":["import axios from 'axios';\nimport Keycloak from 'keycloak-js';\n\nexport default class AxiosKeycloak extends Keycloak {\n  createAxiosInstance(config) {\n    const instance = axios.create(config);\n\n    instance.interceptors.request.use(\n      config =>\n        new Promise((resolve, reject) =>\n          this.updateToken(5)\n            .success(() => {\n              config.headers.Authorization = 'Bearer ' + this.token;\n              resolve(config);\n            })\n            .error(() => {\n              this.login();\n            })\n        )\n    );\n\n    return instance;\n  }\n\n  static get axios() {\n    return axios;\n  }\n}\n","import AxiosKeycloak from 'utils/axios-keycloak';\nimport { env } from 'utils/env-helper';\n\n// API rÃ©elle\n\nconst keycloak = new AxiosKeycloak({\n  url: env('REACT_APP_SSO_APP_URL'),\n  realm: env('REACT_APP_SSO_APP_REALM'),\n  clientId: env('REACT_APP_SSO_APP_CLIENT_ID')\n});\n\nconst apiHttpClient = keycloak.createAxiosInstance({\n  baseURL: env('REACT_APP_API_URL')\n});\n\nfunction login() {\n  return new Promise((resolve, reject) => {\n    return keycloak\n      .init({ onLoad: 'login-required' })\n      .success(authenticated => {\n        return resolve(authenticated);\n      })\n      .error(error => {\n        return reject(new Error(error));\n      });\n  });\n}\n\nfunction logout() {\n  return new Promise((resolve, reject) => {\n    return keycloak\n      .logout()\n      .success(authenticated => {\n        return resolve(authenticated);\n      })\n      .error(error => {\n        return reject(new Error(error));\n      });\n  });\n}\n\nfunction isAuthenticated() {\n  return new Promise((resolve, reject) => {\n    return keycloak\n      .init({ onLoad: 'check-sso' })\n      .success(authenticated => {\n        return resolve(authenticated);\n      })\n      .error(error => {\n        return reject(new Error(error));\n      });\n  });\n}\n\nfunction isDepositaire() {\n  return new Promise((resolve, reject) => {\n    return resolve(keycloak.hasRealmRole('depositaire'));\n  });\n}\n\nfunction isInstructeur() {\n  return new Promise((resolve, reject) => {\n    return resolve(keycloak.hasRealmRole('instructeur'));\n  });\n}\n\nfunction isBeta() {\n  return new Promise((resolve, reject) => {\n    return resolve(keycloak.hasRealmRole('beta'));\n  });\n}\n\nfunction getUser() {\n  return new Promise((resolve, reject) => {\n    return keycloak\n      .loadUserInfo()\n      .success(userInfo => {\n        return resolve({\n          firstName: userInfo.given_name,\n          lastName: userInfo.family_name,\n          email: userInfo.email\n        });\n      })\n      .error(error => {\n        return reject(new Error(error));\n      });\n  });\n}\n\nfunction mesDepots() {\n  return new Promise((resolve, reject) => {\n    return keycloak\n      .init({ onLoad: 'check-sso' })\n      .success(authenticated => {\n        return resolve(apiHttpClient.get(`/depots`));\n      })\n      .error(error => {\n        return reject(new Error(error));\n      });\n  });\n}\n\nfunction ajouterDepot(file, binary) {\n  return new Promise((resolve, reject) => {\n    return keycloak\n      .init({ onLoad: 'check-sso' })\n      .success(authenticated => {\n        return resolve(apiHttpClient.post(`/depots`, { file, binary }));\n      })\n      .error(error => {\n        return reject(new Error(error));\n      });\n  });\n}\n\nfunction savePieceJointe(code, file, binary) {\n  return new Promise((resolve, reject) => {\n    return keycloak\n      .init({ onLoad: 'check-sso' })\n      .success(authenticated => {\n        return resolve(\n          apiHttpClient.post(`/piecesjointes`, { code, file, binary })\n        );\n      })\n      .error(error => {\n        return reject(new Error(error));\n      });\n  });\n}\n\nconst auth = {\n  login,\n  isAuthenticated,\n  logout,\n  getUser,\n  isDepositaire,\n  isInstructeur,\n  isBeta\n};\nconst depots = {\n  mesDepots,\n  ajouterDepot,\n  savePieceJointe\n};\n\nconst api = {\n  auth,\n  depots\n};\n\nexport default api;\n"],"sourceRoot":""}