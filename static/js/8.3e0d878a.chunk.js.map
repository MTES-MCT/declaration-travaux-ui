{"version":3,"sources":["utils/users-mock.js","utils/api-mock.js"],"names":["users","id","email","firstName","lastName","profils","codePostal","principal","waitingTime","DossiersFixtures","typeFromCerfa","fileName","type","length","toUpperCase","includes","label","cerfaError","file","name","saveInSessionStorage","dossier","numero","reader","FileReader","onload","binaryStr","result","sessionStorage","setItem","JSON","stringify","nom","size","data","URL","createObjectURL","Blob","readAsBinaryString","api","auth","login","Promise","resolve","reject","setTimeout","find","user","Error","isAuthenticated","logout","getUser","isDeposant","isMairie","isInstructeur","isBeta","dossiers","listerDossiers","error","consulterDossier","ajouterDossier","formData","get","toString","date","Date","toLocaleDateString","statut","userId","cerfa","fichierId","DossierId","piecesAJoindre","piecesJointes","push","savePieceJointe","dossierId","code","checkCode","lireFichier","parse","getItem","qualifierDossier"],"mappings":"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","file":"static/js/8.3e0d878a.chunk.js","sourcesContent":["const users = [\n  {\n    id: 'jean.martin',\n    email: 'jean.martin@monfai.fr',\n    firstName: 'Jean',\n    lastName: 'Martin',\n    profils: ['DEPOSANT', 'BETA']\n  },\n  {\n    id: 'jacques.dupont',\n    email: 'jacques.dupont@monfai.fr',\n    firstName: 'Jacques',\n    lastName: 'Dupont',\n    profils: ['INSTRUCTEUR']\n  },\n  {\n    id: 'madame.le-maire',\n    email: 'madame.le-maire@monfai.fr',\n    firstName: 'Madame',\n    lastName: 'Le Maire',\n    profils: ['MAIRIE', 'BETA'],\n    codePostal: ['44100']\n  }\n];\n\nexport default users;\n","import users from './users-mock';\n// API de test uniquement\n\nlet principal = null;\n\nconst waitingTime = 100;\n\nfunction login(id) {\n  return new Promise((resolve, reject) => {\n    setTimeout(function() {\n      if (!id)\n        return reject(new Error('Connexion impossible. User id inconnu.'));\n      return resolve((principal = users.find(user => user.id === id)));\n    }, waitingTime);\n  });\n}\n\nfunction logout() {\n  return new Promise((resolve, reject) => {\n    setTimeout(function() {\n      resolve((principal = null));\n    }, waitingTime);\n  });\n}\n\nfunction isAuthenticated() {\n  return new Promise((resolve, reject) => {\n    setTimeout(function() {\n      return resolve(principal !== null);\n    }, waitingTime);\n  });\n}\n\nfunction isDeposant() {\n  return new Promise((resolve, reject) => {\n    setTimeout(function() {\n      return resolve(principal.profils.includes('DEPOSANT'));\n    }, waitingTime);\n  });\n}\n\nfunction isMairie() {\n  return new Promise((resolve, reject) => {\n    setTimeout(function() {\n      return resolve(principal.profils.includes('MAIRIE'));\n    }, waitingTime);\n  });\n}\n\nfunction isInstructeur() {\n  return new Promise((resolve, reject) => {\n    setTimeout(function() {\n      return resolve(principal.profils.includes('INSTRUCTEUR'));\n    }, waitingTime);\n  });\n}\n\nfunction isBeta() {\n  return new Promise((resolve, reject) => {\n    setTimeout(function() {\n      return resolve(principal.profils.includes('BETA'));\n    }, waitingTime);\n  });\n}\n\nfunction getUser() {\n  return new Promise((resolve, reject) => {\n    setTimeout(function() {\n      if (!principal) return reject(new Error(\"Pas d'utilisateur connecté\"));\n      return resolve(principal);\n    }, waitingTime);\n  });\n}\n\nlet DossiersFixtures = [];\n\nfunction listerDossiers() {\n  return new Promise((resolve, reject) => {\n    setTimeout(\n      function() {\n        return resolve(DossiersFixtures);\n      },\n      function(error) {\n        return reject(error);\n      },\n      waitingTime\n    );\n  });\n}\n\nfunction consulterDossier(id) {\n  return new Promise((resolve, reject) => {\n    setTimeout(function() {\n      return resolve(DossiersFixtures.find(dossier => dossier.id === id));\n    }, waitingTime);\n  });\n}\n\nfunction qualifierDossier(id) {\n  return new Promise((resolve, reject) => {\n    setTimeout(function() {\n      const dossier = DossiersFixtures.find(dossier => dossier.id === id);\n      dossier.statut = 'QUALIFIE';\n      return resolve(dossier);\n    }, waitingTime);\n  });\n}\n\nfunction typeFromCerfa(fileName) {\n  let type = '';\n  if (fileName && fileName.length > 0) {\n    if (fileName.toUpperCase().includes('13406_PCMI'))\n      type = {\n        id: 'pcmi',\n        label: 'Permis de construire de maison individuelle'\n      };\n    if (fileName.toUpperCase().includes('13703_DPMI'))\n      type = { id: 'dp', label: 'Déclaration préalable' };\n  }\n  return type;\n}\n\nfunction cerfaError(file) {\n  return `Fichier CERFA ${file.name} non reconnu. Seuls les fichiers nommés cerfa_13406_PCMI.pdf ou cerfa_13703_DPMI.pdf sont reconnus.`;\n}\n\nfunction saveInSessionStorage(dossier, numero, file) {\n  const reader = new FileReader();\n  reader.onload = function() {\n    const binaryStr = reader.result;\n    sessionStorage.setItem(\n      dossier.type.id + numero,\n      JSON.stringify({\n        nom: file.name,\n        type: file.type,\n        size: file.size,\n        data: URL.createObjectURL(new Blob([binaryStr], { type: file.type }))\n      })\n    );\n  };\n  reader.readAsBinaryString(file);\n}\n\nfunction ajouterDossier(formData) {\n  return new Promise((resolve, reject) => {\n    setTimeout(function() {\n      let file = formData.get('file');\n      const type = typeFromCerfa(file.name);\n      if (type === '') return reject(new Error(cerfaError(file)));\n      const dossier = {\n        id: DossiersFixtures.length.toString(),\n        type: type,\n        date: new Date().toLocaleDateString(),\n        statut: 'DEPOSE',\n        userId: principal.id,\n        cerfa: {\n          type: type,\n          numero: '0',\n          fichierId: type + '0',\n          DossierId: DossiersFixtures.length.toString()\n        },\n        piecesAJoindre: ['1'],\n        piecesJointes: []\n      };\n      saveInSessionStorage(dossier, '0', file);\n      DossiersFixtures.push(dossier);\n      return resolve();\n    }, waitingTime);\n  });\n}\n\nfunction checkCode(code, file) {\n  if (!file.name) return true; // hack because cypress dropzone command have undefined file.name\n  const type = typeFromCerfa(file.name);\n  return code.includes('cerfa') ? code === type.id + '0' : true;\n}\n\nfunction savePieceJointe(dossierId, numero, formData) {\n  return new Promise((resolve, reject) => {\n    setTimeout(function() {\n      let file = formData.get('file');\n      if (!checkCode(numero, file)) throw new Error(cerfaError(file));\n      let dossier = DossiersFixtures.find(dossier => dossier.id === dossierId);\n      saveInSessionStorage(dossier, numero, file);\n      dossier.piecesJointes.push({\n        type: dossier.type,\n        numero: numero,\n        fichierId: dossier.type.id + numero,\n        DossierId: dossierId\n      });\n      return resolve();\n    }, waitingTime);\n  });\n}\n\nfunction lireFichier(id) {\n  return new Promise((resolve, reject) => {\n    setTimeout(function() {\n      return resolve(JSON.parse(sessionStorage.getItem(id)));\n    }, waitingTime);\n  });\n}\n\nconst auth = {\n  login,\n  isAuthenticated,\n  logout,\n  getUser,\n  isDeposant,\n  isMairie,\n  isInstructeur,\n  isBeta\n};\nconst dossiers = {\n  listerDossiers,\n  consulterDossier,\n  ajouterDossier,\n  savePieceJointe,\n  lireFichier,\n  qualifierDossier\n};\n\nconst api = {\n  auth,\n  dossiers\n};\n\nexport default api;\n"],"sourceRoot":""}