{"version":3,"sources":["utils/api-real.js"],"names":["__webpack_require__","r","__webpack_exports__","axios_keycloak__WEBPACK_IMPORTED_MODULE_0__","utils_env_helper__WEBPACK_IMPORTED_MODULE_1__","keycloak","AxiosKeycloak","url","env","realm","clientId","apiHttpClient","createAxiosInstance","baseURL","api","auth","login","Promise","resolve","reject","init","onLoad","success","authenticated","error","Error","isAuthenticated","logout","getUser","loadUserInfo","userInfo","firstName","given_name","lastName","family_name","email","isDepositaire","hasRealmRole","isInstructeur","depots","mesDepots","get","savePieceJointe","code","file","binary","post"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,KAAAI,EAAAJ,EAAA,KAKMK,EAAW,IAAIC,IAAc,CACjCC,IAAKC,YAAI,yBACTC,MAAOD,YAAI,2BACXE,SAAUF,YAAI,iCAGVG,EAAgBN,EAASO,oBAAoB,CACjDC,QAASL,YAAI,uBAmGf,IAaMM,EAAM,CACVC,KAdW,CACXC,MAjGF,WACE,OAAO,IAAIC,QAAQ,SAACC,EAASC,GAC3B,OAAOd,EACJe,KAAK,CAAEC,OAAQ,mBACfC,QAAQ,SAAAC,GACP,OAAOL,EAAQK,KAEhBC,MAAM,SAAAA,GACL,OAAOL,EAAO,IAAIM,MAAMD,SA0F9BE,gBAxEF,WACE,OAAO,IAAIT,QAAQ,SAACC,EAASC,GAC3B,OAAOd,EACJe,KAAK,CAAEC,OAAQ,cACfC,QAAQ,SAAAC,GACP,OAAOL,EAAQK,KAEhBC,MAAM,SAAAA,GACL,OAAOL,EAAO,IAAIM,MAAMD,SAiE9BG,OAtFF,WACE,OAAO,IAAIV,QAAQ,SAACC,EAASC,GAC3B,OAAOd,EACJsB,SACAL,QAAQ,SAAAC,GACP,OAAOL,EAAQK,KAEhBC,MAAM,SAAAA,GACL,OAAOL,EAAO,IAAIM,MAAMD,SA+E9BI,QAjDF,WACE,OAAO,IAAIX,QAAQ,SAACC,EAASC,GAC3B,OAAOd,EACJwB,eACAP,QAAQ,SAAAQ,GACP,OAAOZ,EAAQ,CACba,UAAWD,EAASE,WACpBC,SAAUH,EAASI,YACnBC,MAAOL,EAASK,UAGnBX,MAAM,SAAAA,GACL,OAAOL,EAAO,IAAIM,MAAMD,SAsC9BY,cA9DF,WACE,OAAO,IAAInB,QAAQ,SAACC,EAASC,GAC3B,OAAOD,EAAQb,EAASgC,aAAa,mBA6DvCC,cAzDF,WACE,OAAO,IAAIrB,QAAQ,SAACC,EAASC,GAC3B,OAAOD,EAAQb,EAASgC,aAAa,oBAgEvCE,OAPa,CACbC,UArCF,WACE,OAAO,IAAIvB,QAAQ,SAACC,EAASC,GAC3B,OAAOd,EACJe,KAAK,CAAEC,OAAQ,cACfC,QAAQ,SAAAC,GACP,OAAOL,EAAQP,EAAc8B,IAAd,cAEhBjB,MAAM,SAAAA,GACL,OAAOL,EAAO,IAAIM,MAAMD,SA8B9BkB,gBAzBF,SAAyBC,EAAMC,EAAMC,GACnC,OAAO,IAAI5B,QAAQ,SAACC,EAASC,GAC3B,OAAOd,EACJe,KAAK,CAAEC,OAAQ,cACfC,QAAQ,SAAAC,GACP,OAAOL,EACLP,EAAcmC,KAAd,iBAAqC,CAAEH,OAAMC,OAAMC,cAGtDrB,MAAM,SAAAA,GACL,OAAOL,EAAO,IAAIM,MAAMD,WAuBjBV","file":"static/js/9.4fa5b481.chunk.js","sourcesContent":["import AxiosKeycloak from 'axios-keycloak';\nimport { env } from 'utils/env-helper';\n\n// API rÃ©elle\n\nconst keycloak = new AxiosKeycloak({\n  url: env('REACT_APP_SSO_APP_URL'),\n  realm: env('REACT_APP_SSO_APP_REALM'),\n  clientId: env('REACT_APP_SSO_APP_CLIENT_ID')\n});\n\nconst apiHttpClient = keycloak.createAxiosInstance({\n  baseURL: env('REACT_APP_API_URL')\n});\n\nfunction login() {\n  return new Promise((resolve, reject) => {\n    return keycloak\n      .init({ onLoad: 'login-required' })\n      .success(authenticated => {\n        return resolve(authenticated);\n      })\n      .error(error => {\n        return reject(new Error(error));\n      });\n  });\n}\n\nfunction logout() {\n  return new Promise((resolve, reject) => {\n    return keycloak\n      .logout()\n      .success(authenticated => {\n        return resolve(authenticated);\n      })\n      .error(error => {\n        return reject(new Error(error));\n      });\n  });\n}\n\nfunction isAuthenticated() {\n  return new Promise((resolve, reject) => {\n    return keycloak\n      .init({ onLoad: 'check-sso' })\n      .success(authenticated => {\n        return resolve(authenticated);\n      })\n      .error(error => {\n        return reject(new Error(error));\n      });\n  });\n}\n\nfunction isDepositaire() {\n  return new Promise((resolve, reject) => {\n    return resolve(keycloak.hasRealmRole('depositaire'));\n  });\n}\n\nfunction isInstructeur() {\n  return new Promise((resolve, reject) => {\n    return resolve(keycloak.hasRealmRole('instructeur'));\n  });\n}\n\nfunction getUser() {\n  return new Promise((resolve, reject) => {\n    return keycloak\n      .loadUserInfo()\n      .success(userInfo => {\n        return resolve({\n          firstName: userInfo.given_name,\n          lastName: userInfo.family_name,\n          email: userInfo.email\n        });\n      })\n      .error(error => {\n        return reject(new Error(error));\n      });\n  });\n}\n\nfunction mesDepots() {\n  return new Promise((resolve, reject) => {\n    return keycloak\n      .init({ onLoad: 'check-sso' })\n      .success(authenticated => {\n        return resolve(apiHttpClient.get(`/depots`));\n      })\n      .error(error => {\n        return reject(new Error(error));\n      });\n  });\n}\n\nfunction savePieceJointe(code, file, binary) {\n  return new Promise((resolve, reject) => {\n    return keycloak\n      .init({ onLoad: 'check-sso' })\n      .success(authenticated => {\n        return resolve(\n          apiHttpClient.post(`/piecesjointes`, { code, file, binary })\n        );\n      })\n      .error(error => {\n        return reject(new Error(error));\n      });\n  });\n}\n\nconst auth = {\n  login,\n  isAuthenticated,\n  logout,\n  getUser,\n  isDepositaire,\n  isInstructeur\n};\nconst depots = {\n  mesDepots,\n  savePieceJointe\n};\n\nconst api = {\n  auth,\n  depots\n};\n\nexport default api;\n"],"sourceRoot":""}