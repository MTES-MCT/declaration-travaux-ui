{"version":3,"sources":["utils/api.js","context/user-context.js","utils/auth.js","utils/bootstrap.js","context/auth-context.js","utils/config.js","serviceWorker.js","context/index.js","app.js","index.js"],"names":["api","__webpack_require__","e","then","bind","d","__webpack_exports__","UserProvider","useUser","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_auth_context__WEBPACK_IMPORTED_MODULE_1__","UserContext","React","createContext","props","_useAuth$data","useAuth","data","user","isAuthenticated","a","createElement","Provider","Object","assign","value","context","useContext","undefined","Error","handleAuth","default","auth","login","logout","getUser","bootstrapAppData","_callee","regenerator_default","wrap","_context","prev","next","sent","abrupt","dossiers","stop","AuthContext","AuthProvider","_React$useState","useState","_React$useState2","slicedToArray","firstAttemptFinished","setFirstAttemptFinished","_useAsync","useAsync","promiseFn","_useAsync$data","error","isRejected","isPending","isSettled","reload","useLayoutEffect","react_default","LinearProgress","css","color","message","__dirname","path__WEBPACK_IMPORTED_MODULE_0__","dotenv__WEBPACK_IMPORTED_MODULE_1__","dotenv_expand__WEBPACK_IMPORTED_MODULE_2__","dotenvExpand","config","path","resolve","Boolean","window","location","hostname","match","AppProviders","_ref","children","auth_context","user_context","loadUnAuthenticatedApp","Promise","all","UnAuthenticatedApp","lazy","AuthenticatedApp","App","useEffect","Suspense","fallback","ReactDOM","render","app","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aa848ee3.chunk.js","sourcesContent":["function api() {\n  const importApi = process.env.REACT_APP_API_MOCK\n    ? import('utils/api-mock')\n    : import('utils/api-real');\n  return importApi;\n}\n\nexport default api();\n","import React from 'react';\nimport { useAuth } from './auth-context';\n\nconst UserContext = React.createContext();\n\nfunction UserProvider(props) {\n  const {\n    data: { user, isAuthenticated }\n  } = useAuth();\n  return <UserContext.Provider value={{ user, isAuthenticated }} {...props} />;\n}\n\nfunction useUser() {\n  const context = React.useContext(UserContext);\n  if (context === undefined) {\n    throw new Error(`useUser must be used within a UserProvider`);\n  }\n  return context;\n}\n\nexport { UserProvider, useUser };\n","import api from 'utils/api';\n\nfunction handleAuth() {\n  return api.then(api => {\n    return api.default.auth;\n  });\n}\n\nfunction getUser() {\n  return api.then(handleAuth).then(auth => {\n    return auth.getUser();\n  });\n}\n\nfunction isAuthenticated() {\n  return api.then(handleAuth).then(auth => {\n    return auth.isAuthenticated();\n  });\n}\n\nfunction login() {\n  return api.then(handleAuth).then(auth => {\n    return auth.login();\n  });\n}\n\nfunction logout() {\n  return api.then(handleAuth).then(auth => {\n    return auth.logout();\n  });\n}\n\nconst auth = {\n  login,\n  logout,\n  isAuthenticated,\n  getUser\n};\n\nexport default auth;\n","import auth from 'utils/auth';\n\nasync function bootstrapAppData() {\n  const isAuthenticated = await auth.isAuthenticated();\n  if (!isAuthenticated) {\n    return { user: null, isAuthenticated: false, dossiers: [] };\n  }\n  const user = await auth.getUser();\n  return {\n    user,\n    isAuthenticated\n  };\n}\n\nexport { bootstrapAppData };\n","import React from 'react';\nimport auth from 'utils/auth';\nimport { useAsync } from 'react-async';\nimport { bootstrapAppData } from 'utils/bootstrap';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst AuthContext = React.createContext();\n\nfunction AuthProvider(props) {\n  const [firstAttemptFinished, setFirstAttemptFinished] = React.useState(false);\n  const {\n    data = {\n      user: null,\n      isAuthenticated: false,\n      dossiers: []\n    },\n    error,\n    isRejected,\n    isPending,\n    isSettled,\n    reload\n  } = useAsync({\n    promiseFn: bootstrapAppData\n  });\n\n  React.useLayoutEffect(() => {\n    if (isSettled) {\n      setFirstAttemptFinished(true);\n    }\n  }, [isSettled]);\n\n  if (!firstAttemptFinished) {\n    if (isPending) {\n      return <LinearProgress />;\n    }\n    if (isRejected) {\n      return (\n        <div css={{ color: 'red' }}>\n          <p>{`Oops un problème est survenu au démarrage. Tentez de rafraîchir la page.`}</p>\n          <pre>{error.message}</pre>\n        </div>\n      );\n    }\n  }\n\n  const login = () => auth.login().then(reload);\n  const logout = () => auth.logout().then(reload);\n\n  return <AuthContext.Provider value={{ data, login, logout }} {...props} />;\n}\n\nfunction useAuth() {\n  const context = React.useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(`useAuth must be used within a AuthProvider`);\n  }\n  return context;\n}\n\nexport { AuthProvider, useAuth };\n","import { resolve } from 'path';\nimport { config } from 'dotenv';\nimport dotenvExpand from 'dotenv-expand';\n\ndotenvExpand(config({ path: resolve(__dirname, '../../.env') }));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\n/* eslint no-console: \"off\" */\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { AuthProvider } from './auth-context';\nimport { UserProvider } from './user-context';\n\nfunction AppProviders({ children }) {\n  return (\n    <AuthProvider>\n      <UserProvider>{children}</UserProvider>\n    </AuthProvider>\n  );\n}\nAppProviders.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport default AppProviders;\n","import React from 'react';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { useUser } from 'context/user-context';\n\nconst loadUnAuthenticatedApp = () => import('./unauthenticated-app');\nconst UnAuthenticatedApp = React.lazy(loadUnAuthenticatedApp);\nconst AuthenticatedApp = React.lazy(() => import('./authenticated-app'));\n\nfunction App() {\n  const { isAuthenticated } = useUser();\n  React.useEffect(() => {\n    loadUnAuthenticatedApp();\n  }, [isAuthenticated]);\n  return (\n    <React.Suspense fallback={<LinearProgress />}>\n      {isAuthenticated ? <AuthenticatedApp /> : <UnAuthenticatedApp />}\n    </React.Suspense>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport AppProviders from './context';\nimport App from 'app';\nimport 'utils/config';\n\nReactDOM.render(\n  <AppProviders>\n    <App />\n  </AppProviders>,\n  document.getElementById('root')\n);\n\n// ReactDOM.render(<Page />, document.querySelector('#root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}